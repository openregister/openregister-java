apply plugin: 'idea'
apply plugin: 'java'
apply from: 'external-dependencies.gradle'
apply from: 'idea-config.gradle'

group 'openregister'

buildscript {
    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/robfletcher/gradle-plugins" }
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:0.13.0"
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
        classpath "com.github.robfletcher:compass-gradle-plugin:2.0.6"
        classpath 'org.owasp:dependency-check-gradle:1.4.4.1'
    }
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.github.robfletcher.compass"
apply plugin: 'org.owasp.dependencycheck'

def assetsDir = new File(projectDir, "src/main/resources/assets")

compass {
    importPath = files(
        new File(assetsDir, "govuk_frontend_toolkit/stylesheets"),
        new File(assetsDir, "govuk_template/source/assets/stylesheets")
    )
    sassDir = new File(assetsDir, "sass")
    cssDir = file("build/resources/main/assets/css")
    outputStyle = "expanded"
    force = true
    sourcemap = true
}

dependencyCheck {
    failBuildOnCVSS = 0
    skipConfigurations = ['jrubyExec']
    suppressionFile = 'dependency-check-suppressions.xml'
}

// because we build into src/main/resources, we need compassCompile to run before processResources
processResources.dependsOn 'compassCompile'


task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

repositories {
    mavenCentral()
    maven {
        url 'https://dl.bintray.com/openregister/openregister'
    }
    maven {
        url 'https://dl.bintray.com/alphagov/maven'
    }
}

//noinspection GroovyAssignabilityCheck
configurations {
    compile.exclude module: 'slf4j-log4j12'
    compile.exclude module: 'slf4j-simple' // dropwizard uses logback, not slf4j-simple
}

dependencies {
    compile dropwizard, stringTemplate, apacheCommonsCodec, apacheCommonsCollections, awsS3
    compile jacksonCsv, jena, jerseyMedia, markdown, thymeleaf, verifiableLog
    compile jdbi, jersey_client
    compile dropwizardLogstash
    compile(postgresClient) {
        exclude group: 'org.slf4j'
    }
    compile jetty

    testCompile junit, mockito, dropwizardTest, wiremock
    testCompile dropwizardTest, jsoup, jsonAssert
}

jar.baseName = "openregister-java"

shadowJar {
    mergeServiceFiles()
    exclude "license/**"

    baseName = "openregister-java"
    manifest {
        attributes 'Main-Class': 'uk.gov.register.RegisterApplication'
    }
}

assemble {
    dependsOn << shadowJar
    doLast {
        new File("deploy/openregister-java.jar").bytes = shadowJar.archivePath.bytes
        createDeployableBundle.execute()
    }
}

task startAppForConformance << {
    startApp()
}

void startApp() {
    ProcessBuilder builder = new ProcessBuilder(
            "java",
            "-jar",
            relativePath(shadowJar.archivePath),
            "server",
            "src/test/resources/conformance-app-config.yaml"
    ).directory(projectDir.absoluteFile)
    builder.redirectError(ProcessBuilder.Redirect.to(new File(projectDir, 'stderr.txt')))
    builder.redirectOutput(ProcessBuilder.Redirect.to(new File(projectDir, 'stdout.txt')))
    project.ext.runningApp = builder.start()
    waitForApplicationToStart()
}

void waitForApplicationToStart() {
    URL target = new URL('http://localhost:9091/healthcheck')

    int counter = 0
    boolean appRunning = false
    println "Waiting for application to start (10s max)"
    while (!appRunning && counter++ < 10) {
        try {
            HttpURLConnection connection = (HttpURLConnection) target.openConnection()
            appRunning = connection.getResponseCode() == 200
        }
        catch (IOException ignored) {
            Thread.sleep(1000)
        }
    }

    if(!appRunning){
        throw new Exception("Application start timeout (10s)")
    }
}

task stopAppForConformance << {
    stopApp()
}

void stopApp() {
    runningApp?.destroy()?.waitFor()
}

task(loadSchoolDataForConformance, type: Exec) {
    doFirst{
        exec{
            executable "$projectDir/drop_schema.sh"
            args 'http://localhost:9090', 'foo:bar'
        }
    }
    mustRunAfter startAppForConformance
    commandLine 'curl', '-u', 'foo:bar', '-s', '-H', 'Content-type: application/uk-gov-rsf', '--data-binary', '@school-data.rsf',
                'http://localhost:9090/load-rsf'
}

task createConformanceTestVenv(type: Exec) {
    commandLine 'python3.6', '-m', 'venv', '.venv'
}

task installConformanceTestDeps(type: Exec) {
    dependsOn << createConformanceTestVenv
    commandLine '.venv/bin/pip', 'install', '-r', 'requirements.txt'
}

task runConformanceTests(type: Exec) {
    dependsOn << assemble
    dependsOn << startAppForConformance
    dependsOn << loadSchoolDataForConformance
    dependsOn << installConformanceTestDeps
    finalizedBy stopAppForConformance
    mustRunAfter test
    commandLine '.venv/bin/openregister-conformance', '--no-https', '--register', 'school', 'http://localhost:9090', '--register-domain', 'test.register.gov.uk'
}

check {
    dependsOn << runConformanceTests
    dependsOn << 'dependencyCheck'
}

test {
    dependsOn << compileTestJava
    testLogging {
        events "skipped", "failed", "standardError"
        showCauses true
        showExceptions true
        showStackTraces true
        exceptionFormat "full"

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

clean.doFirst {
    delete "${rootDir}/.venv/"
}

task createDeployableBundle(type: Zip) {
    Map env = System.getenv()
    baseName('openregister-java')
    from('deploy/')
    include('*')
    include('scripts/**/*.sh')
    include('manifests/**/*.yml')
    destinationDir file('deployable_bundle') // directory that you want your archive to be placed in
}

task(run, type: JavaExec, dependsOn: ['classes']) {
    main = 'uk.gov.register.RegisterApplication'
    classpath = sourceSets.main.runtimeClasspath
    args = ["server", "config.yaml"]
    jvmArgs = ["-DbaseDirForTemplates=$projectDir/src/main/resources"]
}

task stage(dependsOn: ['assemble'])
